#!/bin/bash

source "$SIKAR_SYSTEM_DIR/ignore/gitCredentials"

delete() {
  delete_local=false
  delete_remote=false

  # Parse options
  while getopts ":lr" opt; do
    case ${opt} in
      l )
        delete_local=true
        ;;
      r )
        delete_remote=true
        ;;
      \? )
        echo "Invalid option: -$OPTARG" 1>&2
        exit 1
        ;;
      : )
        echo "Option -$OPTARG requires an argument" 1>&2
        exit 1
        ;;
    esac
  done
  shift $((OPTIND -1))

  # Check if --name argument is provided
  while [[ $# -gt 0 ]]; do
    case "$1" in
      --name=* )
        repo_name="${1#*=}"
        shift
        ;;
      --name )
        shift
        repo_name="$1"
        shift
        ;;
      *)
        repo_name="$1"
        shift
        ;;
    esac
  done

  if [[ -z "$repo_name" ]]; then
     read -rp "Enter project name to be deleted: " repo_name
  fi

  # Check if either -l or -r or both were provided
  if ! $delete_local && ! $delete_remote; then
    r_echo "Please specify at least one of the options -l or -r" 1>&2
    exit 1
  fi

  if $delete_local; then
    echo "deleting from local..."
    delete_project_repo_from_local "$repo_name"
  fi

  if $delete_remote; then
    echo "deleting from remote..."
    delete_project_repo_from_remote "$repo_name"
  fi
}

# Function to create a new repository on GitHub
delete_project_repo_from_local() {
    local repo_name="$1"
    local files_to_delete=$(find "$SIKAR_DIR" -type d -name "$repo_name")
    if [ -z "$files_to_delete" ]; then
      y_echo "no files found with name $repo_name"
    else
      rm -rf "$files_to_delete"
      # $? -> last comment execution status, if success then 0 else 1
      if [ $? -eq 0 ]; then
          g_echo "deleted from local"
      fi
    fi

    find "$SIKAR_DIR" -type d -name "$repo_name" -exec rm -rf {} +
    echo "deleted from local"
}

delete_project_repo_from_remote() {
    local repo_name="$1"

    r_echo "Are you sure you want to delete $repo_name repository from remote [y/n] ?"
    read -r confirm
    if [[ "$confirm" == "y" || "$confirm" == "Y" ]]; then
      # -s : silence the progression, -o : output to stdout -w "%{http_code}" : return the http code
      # if we want silence the output use -o /dev/null;
      # if we want to store the output in a file use -o response.json
      # response_code=$(tail -c 3 response.json) gets the last 3 characters,will use (head -c -3 response.json) to strip off other than last 3 chars
      local response_code=$(curl -s -w "%{http_code}" -X DELETE \
           -H "Authorization: token $GITHUB_TOKEN" \
           "https://api.github.com/repos/$GITHUB_USERNAME/$repo_name")

# as we are using regex inside the if condition we should use if syntax [[ ]]
      if [[ "$response_code" == *"204"* ]]; then
          r_echo "delete not success"
          exit 1
      fi
      g_echo "deleted from remotes"
    else
      echo "Operation aborted."
      exit 0
    fi
}

delete "$@"