#!/bin/bash
# Function to create a new project

# Get the current working directory
#current_dir="$(pwd)"
# Load configuration from application.properties
#source "$current_dir/pom.sikarXml"

#include github repo creation as well
# parse the arguments and use it if provided
source "$SIKAR_SYSTEM_DIR/ignore/gitCredentials"

create() {
    local name=""
    local type=""
    local description=""
    local is_git_project=false

    # Parse command-line options
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --name=*)
                name="${1#*=}"
                ;;
            --type=*)
                type="${1#*=}"
                ;;
            --description=*)
                description="${1#*=}"
                ;;
            --git)
                is_git_project=true
                ;;
            *)
                echo "Invalid option: $1"
                exit 1
                ;;
        esac
        echo "before shift"
        echo "$@"
        shift
        echo "after shift"
        echo "$@"
    done

    # Check if type is missing
    if [[ -z "$name" ]]; then
        # Prompt user to provide type
        read -rp "Enter project name: " name
    fi
    if [[ -z "$type" ]]; then
        # Prompt user to provide type
        echo -e "possible types are:"
#        for dir in $SIKAR_SYSTEM_DIR/templates/*; do
#            echo "$(basename dir)"
#        done
        echo "java"
        echo "boot"

        read -rp "Enter project type: " type
    fi
    if [[ -z "$description" ]]; then
        # Prompt user to provide type
        read -rp "Enter project description: " description
    fi

    case $type in
      javaApplication|java)
          create_plain_java_project "$name" "$description"
          ;;
      sikarBootApplication|boot)
          create_sikar_boot_project "$name" "$description"
          ;;
      *)
          echo "Invalid choice"
          exit 1
          ;;
    esac
    
    # If it's a Git project, create GitHub repo and push to GitHub
    if $is_git_project; then
        create_github_repo "$name" "$description"
        push_to_github "$name"
    fi
}

# Function to create a new repository on GitHub
create_github_repo() {
    local repo_name="$1"
    local description="$2"

    # Create a new repository via GitHub API
    curl -X POST \
         -H "Authorization: token $GITHUB_TOKEN" \
         -d '{"name": "'"$repo_name"'", "description": "'"$description"'"}' \
         "https://api.github.com/user/repos"
}

# Function to push local project to GitHub
push_to_github() {
    local repo_name="$1"
    pushd "$(pwd)/$appName"
    # Initialize a git repository if not already initialized
    if [[ ! -d .git ]]; then
        git init
        git add .
        git commit -m "Initial commit"
    fi

    # Add GitHub repository as remote origin
    git remote add origin "git@github.com:$GITHUB_USERNAME/$repo_name.git"
    # Push code to GitHub
    git push -u origin main
    popd
}

# Function to create a plain Java project structure
create_plain_java_project() {
    local appName=$1
    local appDir="$(pwd)/$appName"
    mkdir -p "$appDir"

    echo "Creating Plain Java project structure for $appName..."

    cp -R "$SIKAR_SYSTEM_DIR"/templates/javaApplication/* "$appDir"
}

# Function to create a Sikar Boot project structure
create_sikar_boot_project() {
    local appName=$1
    local appDir="$(pwd)/$appName"
    mkdir -p "$appDir"

    echo "Creating Sikar Boot project structure for $appName... in $SIKAR_SYSTEM_DIR"

    cp -R "$SIKAR_SYSTEM_DIR"/templates/sikarBootApplication/* "$appDir"

    sed -i '' -e "s/{project_name}/$appName/g" "$appDir"/pom.sikar.sh
}

create "$@"